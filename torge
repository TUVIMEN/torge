#!/bin/sh
# by Dominik Stanis≈Çaw Suchora <suchora.dominik7@gmail.com>
# License: GNU GPLv3

PAGE=1
SEARCH=""
DELIM="\t"
PROXY=""
NOPROMPT=""
NOCLIPBOARD=""
COMMAND=""
CSV=0
CSV_HEADER=1
JSON=0
LINK_CONV=0
LATEST=0
COLORS=""
ARRANGEMENT=""
ARRANGEMENT_FORMAT=""

C_LE="31"
C_SE="32"
C_PAGES="32"
C_SIZE="33"
C_CATEGORY="34"
C_EXTENSION="34"
C_VOLUME="34"
C_LANGUAGE="34"
C_DOWNLOADED="35"
C_HEALTH="35"
C_AUTHOR="35"
C_DATE="36"
C_NAME="39"
COLOR=1

alias basic_curl='curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) QtWebEngine/5.15.2 Chrome/87.0.4280.144 Safari/537.36" -H "Accept-Encoding: gzip, deflate" --compressed'

curl_no_cf() {
    t19192="$(basic_curl "$@")"
    if echo "$t19192" | head -n1 | cut -b 1-71 | grep -Fxq '<!DOCTYPE html><html lang="en-US"><head><title>Just a moment...</title>'
    then
        printf 'blocked by cloudflare\n' >&2
        exit 1
    fi
    echo "$t19192"
}

ucurl() {
    if [ -z "$PROXY" ]
    then
        curl_no_cf "$@"
    else
        curl_no_cf -x "$PROXY" "$@"
    fi
}

arg0="$(basename "$0")"

print_help() {
    printf "%s [SOURCE] [OPTION]... [PATTERN]\nSearch torrent sites for PATTERN in SOURCE.\nExample: %s tpb -s size -p 2 'archlinux'\n\n" "$arg0" "$arg0"
    printf "Sources:\n  tpb|thepiratebay\n  lt|limetorrents\n  1337x\n  rarbg\n  nyaa\n  libgen\n\n"
    printf "Universal options:\n"
    printf "  -d,  --domain DOMAIN\t\tset domain to DOMAIN\n"
    printf "  -D,  --delimiter DELIM\tset delimiter to DELIM, by default '\\\\t'\n"
    printf "  -p,  --page NUM\t\tshow page at NUM\n"
    printf "  -C,  --no-color\t\tdisable coloring of output\n"
    printf "       --no-prompt\t\tdo not show prompt\n"
    printf "       --no-clipboard\t\tdo not copy results to clipboard, just print them to stderr\n"
    printf "       --choose COMMAND\t\tuse COMMAND to choose\n"
    printf "       --csv\t\t\tprint lines simply delimited by DELIM, by default the first line will be a csv header\n"
    printf "       --no-csv-header\t\tdo not print csv header\n"
    printf "       --json\t\t\toutput json format\n"
    printf "       --link-conv\t\tconvert links to their real destination (works only with --csv and --json options)\n"
    printf "  -a,  --arrangment FIELDS\tchange arrangement of fields in output, FIELDS is a list of fields separated by common delims,\n\t\t\t\tlist of possible fields can be found in help info of each source.\n"
    printf "  -x,  --proxy PROXY\t\tpass all requests through PROXY\n"
    printf "  -h,  --help\t\t\tshow help\n\n"
    printf "Further help can be found by typing %s SOURCE -h.\n" "$arg0"
    printf "Selection is done by inputting numbers of lines delimited by spaces or commas\n" "$arg0"
    printf "Output will be copied via xclip or xsel.\n"
}

pastelines() {
    awk -v "raw_colors=$COLORS" -v "raw_arrangement=$ARRANGEMENT" 'function print_fields(lines,arrangment,alen,step,colors) {
            ORS = ""
            for (i = 0; i < step; i++) {
                for (j = 2; j <= alen; j++) {
                    if (j != 2)
                        print "'"$DELIM"'"
                    k=arrangement[j]
                    if ('"$COLOR"')
                        print "\033["colors[k]"m"lines[(step*(k-1))+i]"\033[0m"
                    else
                        print lines[(step*(k-1))+i]
                }
                printf "\n"
            }
        }

        BEGIN {
            l=0;
            fields = split(raw_colors,colors,",");
            alen = split(raw_arrangement,arrangement,",");
        }

        { lines[l++]=$0 }

        END {
            if (l >= fields)
            if (l%fields == 0) {
                    step = l/fields
                    print_fields(lines,arrangement,alen,step,colors)
            } else
                print "length of some data fields does not match the others"
        }'
}

makefields() {
    COLORS="$(eval "echo \"$(echo "$1" | sed 's/^/$C_/; s/,/,$C_/g; s/[a-z]/\U&/g')\"")"

    if [ -z "$ARRANGEMENT_FORMAT" ]
    then
        ARRANGEMENT=",$(seq "$(echo "$1" | tr ',' '\n' | wc -l)" | paste -sd ',')"
    else
        for i in $(echo "$ARRANGEMENT_FORMAT" | sed 's/[A-Z]/\L&/g; s/[ |,/]/\n/g')
        do
            if [ -z "$i" ] || echo "$i" | grep -q '[^a-z0-9]'
            then
                printf 'unknown character in field "%s"\n' "$i"
                exit 1
            fi
            n="$(echo "$1" | sed -E -n "/((^|,)$i)($|,.*)/!q; s/((^|,)$i)($|,.*)/\\1/; p")"
            if [ -z "$n" ]
            then
                printf 'unknown field "%s" for %s\n' "$i" "$basesite"
                exit 1
            fi

            ARRANGEMENT="$ARRANGEMENT,$(echo "$n" | tr ',' '\n' | wc -l)"
        done
        if [ -z "$ARRANGEMENT" ]
        then
            printf 'empty arrangement\n'
            exit 1;
        fi
    fi
}

tpb_help() {
    printf 'Fields: category,size,date,name,se,le,author\n\n'
    printf '  -s,  --sort TYPE\t\tsort using TYPE that can be: name, size, date, se, le, author, category\n'
    printf "  -r,  --reverse\t\tsort in reverse\n"
    printf "       --latest\t\tignore search pattern and show latest torrents\n"
    printf '  -c,  --categories CATEGORIES\tsearch multiple categories separated by [,/|]:
\taudio music audio-books sound-clips flac audio-other

\tvideo movies movies-dvdr music-videos movie-clips tv-shows
\tvideo-handheld hd-movies hd-tv-shows 3d cam-ts uhd-4k-movies
\tuhd-4k-tv-shows video-other

\tapplications apps-windows apps-mac apps-unix apps-handheld
\tapps-ios apps-android apps-other

\tgames games-pc games-mac games-psx games-xbox360 games-wii
\tgames-handheld games-ios games-android games-other

\tporn porn-movies porn-movies porn-pictures porn-games
\tporn-hd-movies porn-movie-clips porn-uhd/4k-movies
\tporn-other

\tother e-books comics pictures covers physibles other-other\n'
}

tpb_searchtrans() {
    tr ' ' '.'
}

tpb_settings() {
    [ -z "$DOMAIN" ] && DOMAIN="https://tpb.party"
    SORT='7'
    case "$sort_type" in
        name) SORT='1';;
        date) SORT='3';;
        size) SORT='5';;
        se) SORT='7';;
        le) SORT='9';;
        author) SORT='11';;
        category) SORT='13';;
    esac

    CATEGORIES=""
    for i in $(echo "$categories_type" | tr ',/|' '   ')
    do
        case "$i" in
            audio) CATEGORIES="$CATEGORIES,100";;
            music) CATEGORIES="$CATEGORIES,101";;
            audio-books) CATEGORIES="$CATEGORIES,102";;
            sound-clips) CATEGORIES="$CATEGORIES,103";;
            flac) CATEGORIES="$CATEGORIES,104";;
            audio-other) CATEGORIES="$CATEGORIES,199";;

            video) CATEGORIES="$CATEGORIES,200";;
            movies) CATEGORIES="$CATEGORIES,201";;
            movies-dvdr) CATEGORIES="$CATEGORIES,202";;
            music-videos) CATEGORIES="$CATEGORIES,203";;
            movie-clips) CATEGORIES="$CATEGORIES,204";;
            tv-shows) CATEGORIES="$CATEGORIES,205";;
            video-handheld) CATEGORIES="$CATEGORIES,206";;
            hd-movies) CATEGORIES="$CATEGORIES,207";;
            hd-tv-shows) CATEGORIES="$CATEGORIES,208";;
            3d) CATEGORIES="$CATEGORIES,209";;
            cam-ts) CATEGORIES="$CATEGORIES,210";;
            uhd-4k-movies) CATEGORIES="$CATEGORIES,211";;
            uhd-4k-tv-shows) CATEGORIES="$CATEGORIES,212";;
            video-other) CATEGORIES="$CATEGORIES,299";;

            applications) CATEGORIES="$CATEGORIES,300";;
            apps-windows) CATEGORIES="$CATEGORIES,301";;
            apps-mac) CATEGORIES="$CATEGORIES,302";;
            apps-unix) CATEGORIES="$CATEGORIES,303";;
            apps-handheld) CATEGORIES="$CATEGORIES,304";;
            apps-ios) CATEGORIES="$CATEGORIES,305";;
            apps-android) CATEGORIES="$CATEGORIES,306";;
            apps-other) CATEGORIES="$CATEGORIES,399";;

            games) CATEGORIES="$CATEGORIES,400";;
            games-pc) CATEGORIES="$CATEGORIES,401";;
            games-mac) CATEGORIES="$CATEGORIES,402";;
            games-psx) CATEGORIES="$CATEGORIES,403";;
            games-xbox360) CATEGORIES="$CATEGORIES,404";;
            games-wii) CATEGORIES="$CATEGORIES,405";;
            games-handheld) CATEGORIES="$CATEGORIES,406";;
            games-ios) CATEGORIES="$CATEGORIES,407";;
            games-android) CATEGORIES="$CATEGORIES,408";;
            games-other) CATEGORIES="$CATEGORIES,499";;

            porn) CATEGORIES="$CATEGORIES,500";;
            porn-movies) CATEGORIES="$CATEGORIES,501";;
            porn-movies) CATEGORIES="$CATEGORIES,dvdr 502";;
            porn-pictures) CATEGORIES="$CATEGORIES,503";;
            porn-games) CATEGORIES="$CATEGORIES,504";;
            porn-hd-movies) CATEGORIES="$CATEGORIES,505";;
            porn-movie-clips) CATEGORIES="$CATEGORIES,506";;
            porn-uhd-4k-movies) CATEGORIES="$CATEGORIES,507";;
            porn-other) CATEGORIES="$CATEGORIES,599";;

            other) CATEGORIES="$CATEGORIES,600";;
            e-books) CATEGORIES="$CATEGORIES,601";;
            comics) CATEGORIES="$CATEGORIES,602";;
            pictures) CATEGORIES="$CATEGORIES,603";;
            covers) CATEGORIES="$CATEGORIES,604";;
            physibles) CATEGORIES="$CATEGORIES,605";;
            other-other) CATEGORIES="$CATEGORIES,699";;
        esac
    done
    if [ -z "$CATEGORIES" ]
    then
        CATEGORIES='0'
    else
        CATEGORIES="$(echo "$CATEGORIES" | cut -b 2-)"
    fi

    [ -n "$sort_reverse" ] && SORT="$(expr "$SORT" + '1')"

    makefields "category,size,date,name,se,le,author"
}

tpb_fields="category,size,date,name,seeders,leechers,author,link"

tpb_page() {
    if [ "$LATEST" -eq 1 ]
    then
        origin="$DOMAIN/recent/$PAGE"
    else
        origin="$DOMAIN/search/$SEARCHP/$PAGE/$SORT/$CATEGORIES"
    fi
    t1="$(ucurl -s "$origin" | reliq 'tr')"
    out_tmp="$(echo "$t1" | grep -oE 'magnet:\?[^"]+')" #magnet
    out_lines="$(echo "$t1" | reliq '
        td .vertTh; a | "%Di\n",
        td align=right m@"&nbsp;" | "%Di\n",
        td ( c@[0] )( c@[1] C@"b" ) -align m@B>"[a-zA-Z-]"; * c@[0] | "%Di\n",
        td a@[0]; a child@ c@[0] href=a>/torrent/ | "%i\n",
        tr; td [0] c@[0] align=right m@Ef>"[0-9]+" | "%i\n",
        tr; td [1] c@[0] align=right m@Ef>"[0-9]+" | "%i\n",
        td a@[0] c@[1]; ( a href=a>/user/ )( i m@f>"Anonymous" ) | "%i\n"
        ' | pastelines)"
}

tpb_link_conv() {
    echo "$1"
}

tpb_out() {
    echo "$out_tmp" | sed "$1q;d"
}

lt_help() {
    printf 'Fields: name,date,size,se,le,health\n\n'
    printf '  -s,  --sort TYPE\t\tsort using TYPE that can be: name, size, date, se, le\n"'
    printf "       --latest\t\tignore search pattern and show latest torrents (--page doesn't work)\n"
}

lt_searchtrans() {
    tr ' .+/_:;' '-'
}

lt_settings() {
    [ -z "$DOMAIN" ] && DOMAIN="https://www.limetorrents.lol"
    SORT=''
    case "$sort_type" in
        name) SORT='';;
        size) SORT='size';;
        date) SORT='date';;
        se) SORT='seeds';;
        le) SORT='leechs';;
    esac
    makefields "name,date,size,se,le,health"
}

lt_fields="name,date,size,seeders,leechers,health,link"

lt_page() {
    if [ "$LATEST" -eq 1 ]
    then
        origin="$DOMAIN/latest100"
    else
        origin="$DOMAIN/search/all/$SEARCHP/$SORT/$PAGE/"
    fi
    t1="$(ucurl -g -L -s "$origin")"
    out_tmp="$(echo "$t1" | reliq 'td +class="tdleft"; a +href=e>".html" | "'$DOMAIN'%(href)v\n"' | sed "s/ /%20/g")"
    out_lines="$(echo "$t1" | reliq '
        table class=table2; {
            td class=tdleft; a href=e>.html | "%i\n",
            td .tdnormal | "%i\n" / sed "/ - /!d; s/ - .*//",
            td .tdnormal | "%i\n" / sed "/ - /d",
            td .tdseed | "%i\n",
            td .tdleech | "%i\n",
            td .tdright; div | "%(class)v\n"
        }
    ' | pastelines)"
}

lt_link_conv() {
    ucurl -L -g -s "$1" | grep -oE -m 1 'magnet:\?[^"]+'
}

lt_out() {
    lt_link_conv "$(echo "$out_tmp" | sed "$1q;d")"
}

t1337x_help() {
    printf 'Fields: name,date,size,se,le,author\n\n'
    printf '  -c,  --categories CATEGORIES\tsearch one of the categories: movies, tv, games, music, apps\n'
    printf '  -s,  --sort TYPE\t\tsort using TYPE that can be: name, size, date, se, le\n'
    printf "  -r,  --reverse\t\tsort in reverse\n"
    printf "       --latest\t\tignore search pattern and show latest torrents (--page doesn't work)\n"
}

t1337x_searchtrans() {
    tr ' .+/_:;' '-'
}

t1337x_settings() {
    [ -z "$DOMAIN" ] && DOMAIN="https://www.1337xx.to"
    if [ -z "$sort_type" ]
    then
        SORT=''
        RSORT=""
    else
        case "$sort_type" in
            name) SORT='';;
            size) SORT='size';;
            date) SORT='time';;
            se) SORT='seeders';;
            le) SORT='leechers';;
        esac
        [ -z "$sort_reverse" ] && RSORT="desc" || RSORT="asc"
    fi
    case "$categories_type" in
        movies) CATEGORIES="Movies";;
        tv) CATEGORIES="TV";;
        games) CATEGORIES="Games";;
        music) CATEGORIES="Music";;
        apps) CATEGORIES="Apps";;
    esac
    makefields "name,date,size,se,le,author"
}

t1337x_fields="name,date,size,seeders,leechers,author,link"

t1337x_page() {
    if [ "$LATEST" -eq 1 ]
    then
        origin="$DOMAIN/trending"
    else
        if [ -z "$CATEGORIES" ]
        then
            origin="$DOMAIN/sort-search/$SEARCHP/$SORT/$RSORT/$PAGE/"
            [ -z "$SORT" ] && origin="$DOMAIN/search/$SEARCHP/$PAGE/"
        else
            origin="$DOMAIN/sort-category-search/$SEARCHP/$CATEGORIES/$SORT/$RSORT/$PAGE/"
            [ -z "$SORT" ] && origin="$DOMAIN/category-search/$SEARCHP/$CATEGORIES/$PAGE/"
        fi
    fi
    t1="$(ucurl -s "$origin")"
    out_tmp="$(echo "$t1" | reliq 'tbody; a href=b>/torrent/ | "'$DOMAIN'%(href)v\n"')" #links
    out_lines="$(echo "$t1" | reliq '
        tbody; {
            a href=b>/torrent/ | "%i\n",
            td .coll-date | "%i\n",
            td .coll-4 | "%i\n" / sed "s/<.*//",
            td class="coll-2 seeds" | "%i\n",
            td class="coll-3 leeches" | "%i\n",
            td .coll-5; a | "%i\n"
        }
    ' | pastelines)"
}

t1337x_link_conv() {
    ucurl -g -s "$1" | grep -oE -m 1 'magnet:\?[^"]+'
}

t1337x_out() {
    t1337x_link_conv "$(echo "$out_tmp" | sed "$1q;d")"
}

rarbg_help() {
    printf 'Fields: name,date,size,se,le,author\n\n'
    printf '  -c,  --categories CATEGORIES\tsearch one of the categories: movies, anime, xxx, tv, apps, games, doc, music, other\n'
    printf '  -s,  --sort TYPE\t\tsort using TYPE that can be: name, size, date, se, le\n'
    printf "  -r,  --reverse\t\tsort in reverse\n"
    printf "       --latest\t\tignore search pattern and show latest torrents\n"
}

rarbg_searchtrans() {
    sed 's/+/%2B/g; s/;/%3B/g; s/\//%2F/g; s/?/%3F/g; s/\$/%24/g; s/@/%40/g; s/#/%23/g; s/%/%25/g; s/&/%26/g; s/ /+/g;'
}

rarbg_settings() {
    [ -z "$DOMAIN" ] && DOMAIN="https://www.rarbgo.to"
    RSORT="ASC"
    SORT=''
    case "$sort_type" in
        name) SORT='';;
        size) SORT='size';;
        date) SORT='data';;
        se) SORT='seeders';;
        le) SORT='leechers';;
    esac
    [ -z "$sort_reverse" ] && RSORT="DESC"
    [ -n "$SORT" ] && SORT="&order=$SORT&by=$RSORT"
    [ -n "$categories_type" ] && CATEGORIES="&category=$categories_type"
    makefields "name,date,size,se,le,author"
}

rarbg_fields="name,date,size,seeders,leechers,author,link"

rarbg_page() {
    if [ "$LATEST" -eq 1 ]
    then
        origin="https://www.rarbgo.to/$PAGE/"
    else
        origin="$DOMAIN/search/$PAGE/?search=$SEARCHP$SORT$CATEGORIES"
    fi
    t1="$(ucurl -s -L -g "$origin")"
    out_tmp="$(echo "$t1" | reliq 'table .tablelist2; td; a title | "'"$DOMAIN"'%(href)v\n"')" #links
    out_lines="$(echo "$t1" | reliq '
        table .tablelist2; {
            td; a title | "%i\n",
            td .tlista width=150px c@[0] | "%i\n",
            td .tlista width=100px | "%i\n",
            font color | "%i\n",
            td .tlista width=50px c@[0] | "%i\n",
            td .tlista -width align=center | "%i\n"
        }
    ' | pastelines)"
}

rarbg_link_conv() {
    ucurl -g -s "$1" | grep -oE -m 1 'magnet:\?[^"]+' #!! cloudflare
}

rarbg_out() {
    rarbg_link_conv "$(echo "$out_tmp" | sed "$1q;d")"
}

nyaa_help() {
    printf 'Fields: category,name,size,date,se,le,downloaded\n\n'
    printf '  -s,  --sort TYPE\t\tsort using TYPE that can be: name, comments, size, date, se, le, downloads\n'
    printf "  -r,  --reverse\t\tsort in reverse\n"
    printf "       --latest\t\tignore search pattern and show latest torrents\n"
    printf '  -f,  --filter\t\t\tset filter to: no, no-remakes, no-trusted\n'
    printf '  -c,  --categories CATEGORIES\tsearch one of the categories:\n'
    printf '\t  all\n'
    printf '\t  anime, anime-music-video, anime-english-translated,\n\t  anime-non-english-translated, anime-raw\n'
    printf '\t  audio, audio-lossless, audio-lossy\n'
    printf '\t  literature, literature-english-translated,\n\t  literature-non-english-translated, literature-raw\n'
    printf '\t  live-action, live-action-english-translated, live-action-idol-promotional-video,\n\t  live-action-non-english-translated, live-action-raw\n'
    printf '\t  pictures, pictures-graphics, pictures-photos\n'
    printf '\t  software, software-applications, software-games\n'
}

nyaa_searchtrans() {
    tr ' ' '+'
}

nyaa_settings() {
    [ -z "$DOMAIN" ] && DOMAIN="https://nyaa.si"
    RSORT="asc"
    CATEGORIES='0_0'
    FILTER='0'

    SORT=''
    case "$sort_type" in
        name) SORT='';;
        comments) SORT='comments';;
        size) SORT='size';;
        date) SORT='id';;
        se) SORT='seeders';;
        le) SORT='leechers';;
        downloads) SORT='downloads';;
    esac

    [ -z "$sort_reverse" ] && RSORT="desc"
    if [ -n "$filter_type" ]
    then
        case "$filter_type" in
            no) FILTER='0';;
            no-remakes) FILTER='1';;
            trusted) FILTER='2';;
        esac
    fi
    if [ -n "$categories_type" ]
    then
        case "$categories_type" in
            all) CATEGORIES='0_0';;
            anime) CATEGORIES='1_0';;
            anime-music-video) CATEGORIES='1_1';;
            anime-english-translated) CATEGORIES='1_2';;
            anime-non-english-translated) CATEGORIES='1_3';;
            anime-raw) CATEGORIES='1_4';;
            audio) CATEGORIES='2_0';;
            audio-lossless) CATEGORIES='2_1';;
            audio-lossy) CATEGORIES='2_2';;
            literature) CATEGORIES='3_0';;
            literature-english-translated) CATEGORIES='3_1';;
            literature-non-english-translated) CATEGORIES='3_2';;
            literature-raw) CATEGORIES='3_3';;
            live-action) CATEGORIES='4_0';;
            live-action-english-translated) CATEGORIES='4_1';;
            live-action-idol-promotional-video) CATEGORIES='4_2';;
            live-action-non-english-translated) CATEGORIES='4_3';;
            live-action-raw) CATEGORIES='4_4';;
            pictures) CATEGORIES='5_0';;
            pictures-graphics) CATEGORIES='5_1';;
            pictures-photos) CATEGORIES='5_2';;
            software) CATEGORIES='6_0';;
            software-applications) CATEGORIES='6_1';;
            software-games) CATEGORIES='6_2';;
        esac
    fi
    makefields "category,name,size,date,se,le,downloaded"
}

nyaa_fields="category,name,size,date,seeders,leechers,downloaded,link"

nyaa_page() {
    if [ "$LATEST" -eq 1 ]
    then
        origin="$DOMAIN/?p=$PAGE"
    else
        origin="$DOMAIN/?f=$FILTER&c=$CATEGORIES&q=$SEARCHP&s=$SORT&o=$RSORT&p=$PAGE"
    fi
    t1="$(ucurl -s "$origin")"
    out_tmp="$(echo "$t1" | reliq 'table .torrent-list; td class; a href=b>magnet:? | "%(href)v\n"')"
    out_lines="$(echo "$t1" | reliq '
        table .torrent-list; {
            a href=B>/?c=[0-9]_[0-9]; img .category-icon alt | "%(alt)v\n",
            td colspan=2; a href=E>/view/[0-9]+ | "%i\n",
            td class m@e>"iB" | "%i\n",
            td class data-timestamp | "%i\n",
            td class m@E>"^[0-9]+$" | "%i\n" / sed "N;N; s/\n.*//",
            td class m@E>"^[0-9]+$" | "%i\n" / sed "N;N; s/.*\n(.*)\n.*/\1/" "E",
            td class m@E>"^[0-9]+$" | "%i\n" / sed "N;N; s/.*\n//"
        }
    ' | pastelines)"
}

nyaa_link_conv() {
    echo "$1"
}

nyaa_out() {
    echo "$out_tmp" | sed "$1q;d"
}

libgen_help() {
    printf 'Fields for\n  non-fiction: name,pages,size,date,author,extension\n  fiction: name,author,size,extension,language\n  science: name,author,size,volume\n\n'
    printf '  -s,  --sort TYPE\t\tsort using TYPE that can be: id, name, publisher, date, pages, lang, size, extension\n'
    printf "  -r,  --reverse\t\tsort in reverse\n"
    printf "  -S,  --searchby TYPE\t\tsearch by TYPE, that can be: def, name, author, series, publisher, date, isbn, lang, md5, tags, extension\n"
    printf "  -F,  --format FORMAT\t\tspecify file format for results\n"
    printf "  -l,  --language LANG\t\tspecify language for results (only for fiction)\n"
    printf "  -m,  --mode MODE\t\tsearches in chosen MODE which can be: nf|non-fiction, f|fiction, s|science\n"
    printf "  -M,  --mask\t\t\tuse wildcards for PATTERN\n"
    printf "  -R,  --results NUM\t\tshow NUM results\n"
    printf "       --latest\t\tignore search pattern and show latest uploads\n"
}

libgen_searchtrans() {
    tr ' ' '+'
}

libgen_settings() {
    [ -z "$DOMAIN" ] && DOMAIN="https://libgen.st"

    [ -z "$RESULTS" ] && RESULTS='25'

    MODE='0'
    case "$mode_type" in
        f|fiction) MODE='1'; makefields "name,author,size,extension,language";;
        s|science) MODE='2'; makefields "name,author,size,volume";;
        #nf|non-fiction)
        *) MODE='0'; makefields "name,pages,size,date,author,extension";;
    esac

    SORT=''
    case "$sort_type" in
        id) SORT='id';;
        name) SORT='title';;
        publisher) SORT='publisher';;
        date) SORT='year';;
        pages) SORT='pages';;
        lang) SORT='language';;
        size) SORT='filesize';;
        extension) SORT='extension';;
    esac
    RSORT="DESC"
    [ -z "$sort_reverse" ] && RSORT="ASC"

    SEARCHBY='def'
    case "$searchby_type" in
        def) SEARCHBY="def";;
        name) SEARCHBY="title";;
        author) SEARCHBY="author";;
        series) SEARCHBY="series";;
        publisher) SEARCHBY="publisher";;
        date) SEARCHBY="year";;
        isbn) SEARCHBY="identifier";;
        lang) SEARCHBY="language";;
        md5) SEARCHBY="md5";;
        tags) SEARCHBY="tags";;
        extension) SEARCHBY="extension";;
    esac

    LANG="";

    MASK='1'
    [ -n "$mask_enable" ] && MASK='0'
}

libgen_0_fields="name,pages,size,date,author,extension,link"
libgen_1_fields="name,author,size,extension,language,link"
libgen_2_fields="name,author,size,volume,link"

libgen_page() {
    case $MODE in
        0)
            if [ "$LATEST" -eq 1 ]
            then
                origin="$DOMAIN/search.php?mode=last&view=detailed&page=$PAGE&res=$RESULTS"
            else
                origin="$DOMAIN/search.php?req=$SEARCHP&open=0&res=$RESULTS&view=detailed&phrase=$MASK&column=$SEARCHBY&page=$PAGE&sort=$SORT&sortmode=$RSORT"
            fi
            t1="$(ucurl -s "$origin" | tr -d '\r' | reliq 'table rules=cols width=100% border=0; tr l@[2]')"
            out_tmp="$(echo "$t1" | reliq 'td colspan=2' | grep -oE '\?md5=[A-Z0-9]+' | sed 's/^?md5=/http:\/\/library.lol\/main\//')" #!!
            out_lines="$(echo "$t1" | reliq '
                td colspan=2; a | "%i\n",
                td C@"font m@f>\"Pages:\" l@[1]"; [0] td ssub@ | "%i\n" / sed "s/<.*//",
                td C@"font m@f>\"Size:\" l@[1]"; [0] td ssub@ | "%i\n" / sed "s/ (.*//",
                td C@"font m@f>\"Year:\" l@[1]"; [0] td ssub@ | "%i\n",
                td colspan=3; b; { a | "%i," } | sed "s/, /,/g" echo "" "\n",
                td C@"font m@f>\"Extension:\" l@[1]"; [0] td ssub@ | "%i\n"
            ' | pastelines)";;
        1)
            [ "$SEARCHBY" = 'def' ] && SEARCHBY=""
            [ "$MASK" -eq 1 ] && MASK=0 || MASK=1

            if [ "$LATEST" -eq 1 ]
            then
                origin="$DOMAIN/fiction/recent?&page=$PAGE"
            else
                origin="$DOMAIN/fiction/?q=$SEARCHP&criteria=$SEARCHBY&language=$LANG&wildcard=$MASK&format=$FORMAT&page=$PAGE"
            fi
            t1="$(ucurl -s "$origin")"
            out_tmp="$(echo "$t1" | reliq 'tbody; tr; ul +class="record_mirrors_compact" | "%i\n" / sed "s/^<li><a href=\"//; s/\".*//" "E"')"
            out_lines="$(echo "$t1" | reliq '
                tbody; tr; {
                    td; a -title | "%i\n",
                    ul +class="catalog_authors" | "%i\n" / sed "s/\t//g; /^$/d; s/^<li>//g; s/<li>/,/g; s/<\/li>//g; s/<a href=?(\"|'\'')[^\"'\'']+?(\"|'\'') title=?(\"|'\'')[^\"'\'']+?(\"|'\'')>//g; s/<\/a>//g; s/, /,/g" "E",
                    td title | "%i\n" / sed "s/.* //;s/&nbsp;//g",
                    td title | "%i\n" / sed "s/ .*//" tr "A-Z" "a-z",
                    td -title c@[0] | "%i\n" / sed "N;s/.*\n//"
                }
            ' | pastelines)";;
        2)
            if [ "$LATEST" -eq 1 ]
            then
                origin="$DOMAIN/scimag/recent?page=$PAGE"
            else
                origin="$DOMAIN/scimag/?q=$SEARCHP&page=$PAGE"
            fi
            t1="$(ucurl -s "$origin")"
            out_tmp="$(echo "$t1" | reliq 'tbody; tr; td; ul; a href [0] | "%(href)v\n"')"
            out_lines="$(echo "$t1" | reliq '
                tbody; tr; td; {
                    p; a | "%i\n" / sed "N; s/\n/ - /",
                    td -style c@[0] | "%i\n",
                    td m@"title=\"edit metadata\"" | "%i\n" / sed "s/<.*//;s/&nbsp;//g",
                    td; p ( m@b>"volume" )( m@E>"\([0-9]+\)$" ) | "%i\n" / sed "s/&nbsp;//g"
                }
            ' | pastelines)";;
            #echo "$t1" | sed -E '/^[[:space:]]+<p>DOI: [^<>]+<\/p>/!d; s/.*DOI: //; s/<\/p>.*//' #doi
    esac
}

libgen_link_conv() {
    if echo "$1" | grep '://sci-hub' -q
    then
        ucurl -g -s "$1" | reliq 'embed | "%(src)v\n"' | sed 's/^/https:/'
    else
        ucurl -g -s "$1" | reliq 'h2; a href l@[1] | "%(href)v\n"'
    fi
}

libgen_out() {
    libgen_link_conv "$(echo "$out_tmp" | sed "s/ /%20/g; ${NUMBER}q;d")"
}

get_clipboard_command() {
    clipboard_command=""
    if command -v xclip >/dev/null
    then
        clipboard_command="xclip -r -sel clip"
        return
    fi
    if command -v xsel >/dev/null
    then
        clipboard_command='tr "\n" "\t" | sed "s/\t$//;s/\t/\n/g" | xsel -ib'
        return
    fi
}

get_results() {
    results="$(for i in $(echo "$2" | sed 's/[,\/|]/ /g' | tr -cd '0-9 \n' | sort -u)
    do
        [ -z "$i" ] && continue
        $1 "$i" | if [ -n "$NOCLIPBOARD" ]
        then
            head -n1
        else
            tee /dev/stderr | head -n1
        fi
    done)"
    if [ -n "$NOCLIPBOARD" ]
    then
        echo "$results"
    else
        get_clipboard_command
        [ -n "$clipboard_command" ] && echo "$results" | eval "$clipboard_command"
    fi
}

link_conv_out() {
    for i in $1
    do
        ${basesite}_link_conv "$i"
    done
}

conv_to_csv() {
    [ "$LINK_CONV" -eq 1 ] && out_tmp="$(link_conv_out "$out_tmp")"
    echo "$out_lines" | awk -v "links_raw=$(echo "$out_tmp" | tr '\n' '\t')" '
        BEGIN {
            ORS = ""
            l=1;
            split(links_raw,links,"\t");
        }
        {
            print $0, "'"$DELIM"'", links[l++], "\n";
        }
    '
}

if [ "$#" -eq '0' ]
then
    print_help >&2
    exit 1
fi

case "$1" in
    tpb|thepiratebay) basesite="tpb";;
    lt|limetorrents) basesite="lt";;
    rarbg) basesite="rarbg";;
    nyaa) basesite="nyaa";;
    1337x) basesite="t1337x";;
    libgen) basesite="libgen";;
    *) print_help >&2; exit 1;
esac
shift

[ $# -eq 0 ] && { ${basesite}_help; exit 1; }

while [ $# -gt 0 ]
do
    case "$1" in
        -s|--sort)
            sort_type="$2"
            shift;;
        -h|--help)
            ${basesite}_help >&2;
            exit 1;;
        --no-csv-header)
            CSV_HEADER=0;;
        --csv)
            COLOR=0
            JSON=0
            DELIM="\t"
            CSV=1;;
        --json)
            COLOR=0
            CSV=0
            DELIM="\t"
            JSON=1;;
        --link-conv)
            LINK_CONV=1;;
        -r|--reverse)
            sort_reverse='1';;
        -R|--results)
            RESULTS="$1"
            shift;;
        -f|--filter)
            filter_type="$2"
            shift;;
        -c|--categories)
            categories_type="$2"
            shift;;
        -S|--searchby)
            searchby_type="$2"
            shift;;
        -m|--mode)
            mode_type="$2"
            shift;;
        -M|--mask)
            mask_enable="$2";;
        -C|--no-color)
            COLOR=0;;
        -p|--page)
            PAGE="$2"
            shift;;
        -d|--domain)
            DOMAIN="$2"
            shift;;
        -F|--format)
            FORMAT="$2"
            shift;;
        -l|--language)
            LANG="$2"
            shift;;
        -D|--delimiter)
            DELIM="$2"
            shift;;
        --no-prompt)
            NOPROMPT='1';;
        --no-clipboard)
            NOCLIPBOARD='1';;
        --choose)
            COMMAND="$2"
            shift;;
        -x|--proxy)
            PROXY="$2"
            shift;;
        --latest)
            LATEST=1;;
        -a|--arrangement)
            ARRANGEMENT_FORMAT="$2"
            shift;;
        *)
            if [ -z "$SEARCH" ]
            then
              SEARCH="$1"
            else
              SEARCH="$SEARCH $1"
            fi;;
    esac
    shift
done

SEARCHP="$(echo "$SEARCH" | ${basesite}_searchtrans)"

${basesite}_settings
${basesite}_page

[ -z "$out_tmp" ] && exit 1


if [ "$CSV" -eq 1 ]
then
    [ "$CSV_HEADER" -eq 1 ] && eval 'echo "$'"${basesite}_fields"'" | tr , "'"$DELIM"'"'
    conv_to_csv
    exit
fi

gen_jq_fields() {
    g=0
    fields_name="${basesite}_fields"
    [ "$basesite" = "libgen" ] && fields_name="${basesite}_${MODE}_fields"

    fields="$(eval 'echo "$'"${fields_name}"'"')"
    for i in $(echo "$fields" | tr ',' "\n")
    do
        echo "\"$i\": (.[$g] | rtrimstr(\" \") | ltrimstr(\" \")),"
        g="$(expr "$g" + '1')"
    done
}

if [ "$JSON" -eq 1 ]
then
    sitename="$basesite"
    [ "$basesite" = "t1337x" ] && sitename="1337x"
    [ "$basesite" = "lt" ] && sitename="limetorrents"
    [ "$basesite" = "tpb" ] && sitename="thepiratebay"

    conv_to_csv | jq -RnMcs --arg link "$origin" --arg site "$sitename" '
        inputs as $line |
        { "link": $link, "site": $site, "results": (
            $line | split("\n")[:-1] | map(split("'"$DELIM"'") | {
                '"$(gen_jq_fields)"'
            })
        ) }
    '
    exit
fi

out_lines="$(echo "$out_lines" | nl -w 2 -s "$(printf "$DELIM")")"

if [ -n "$COMMAND" ]
then
    NUMBERS="$(echo "$out_lines" | eval "$COMMAND")"
else
    echo "$out_lines"
    [ -z "$NOPROMPT" ] && printf 'num> '
    read -r NUMBERS
fi

get_results "${basesite}_out" "$NUMBERS"
